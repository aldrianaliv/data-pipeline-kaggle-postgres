{"timestamp":"2025-09-23T07:28:47.301952","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-23T07:28:47.303702","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/API_POSTGRE.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-23T07:28:47.536368Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-23T07:28:47.537389Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-23T07:28:47.537868Z","level":"info","event":"Current task name:load_stg_to_sor","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-23T07:28:47.538236Z","level":"info","event":"Dag name:API_POSTGRE","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-23T07:28:47.537420","level":"info","event":"Executing: \n        INSERT INTO sor.uber_ride (\n            booking_date,\n            booking_time,\n            booking_id,\n            booking_status,\n            customer_id,\n            vehicle_type,\n            pickup_location,\n            drop_location,\n            avg_vtat,\n            avg_ctat,\n            cancelled_rides_by_customer,\n            reason_for_cancelling_by_customer,\n            cancelled_rides_by_driver,\n            driver_cancellation_reason,\n            incomplete_rides,\n            incomplete_rides_reason,\n            booking_value,\n            ride_distance,\n            driver_ratings,\n            customer_rating,\n            payment_method\n    )\n        SELECT *\n        FROM (\n            SELECT DISTINCT ON (\"Booking ID\")\n            TO_DATE(\"Date\", 'YYYY-MM-DD') AS booking_date,\n            TO_TIMESTAMP(\"Time\", 'HH24:MI:SS')::TIME AS booking_time,\n            \"Booking ID\" AS booking_id,\n            \"Booking Status\" AS booking_status,\n            \"Customer ID\" AS customer_id,\n            \"Vehicle Type\" AS vehicle_type,\n            \"Pickup Location\" AS pickup_location,\n            \"Drop Location\" AS drop_location,\n            NULLIF(\"Avg VTAT\", '')::DECIMAL AS avg_vtat,\n            NULLIF(\"Avg CTAT\", '')::DECIMAL AS avg_ctat,\n            NULLIF(\"Cancelled Rides by Customer\", '')::DECIMAL AS cancelled_rides_by_customer,\n            \"Reason for cancelling by Customer\" AS reason_for_cancelling_by_customer,\n            NULLIF(\"Cancelled Rides by Driver\", '')::DECIMAL AS cancelled_rides_by_driver,\n            \"Driver Cancellation Reason\" AS driver_cancellation_reason,\n            NULLIF(\"Incomplete Rides\", '')::DECIMAL AS incomplete_rides,\n            \"Incomplete Rides Reason\" AS incomplete_rides_reason,\n            NULLIF(\"Booking Value\", '')::DECIMAL AS booking_value,\n            NULLIF(\"Ride Distance\", '')::DECIMAL AS ride_distance,\n            NULLIF(\"Driver Ratings\", '')::DECIMAL AS driver_ratings,\n            NULLIF(\"Customer Rating\", '')::DECIMAL AS customer_rating,\n            \"Payment Method\" AS payment_method\n        FROM stg.uber_data\n        ORDER BY \"Booking ID\", \"Date\" DESC\n        ) AS deduped\n        ON CONFLICT (booking_id) \n        DO UPDATE SET\n            booking_date = EXCLUDED.booking_date,\n            booking_time = EXCLUDED.booking_time,\n            booking_status = EXCLUDED.booking_status,\n            customer_id = EXCLUDED.customer_id,\n            vehicle_type = EXCLUDED.vehicle_type,\n            pickup_location = EXCLUDED.pickup_location,\n            drop_location = EXCLUDED.drop_location,\n            avg_vtat = EXCLUDED.avg_vtat,\n            avg_ctat = EXCLUDED.avg_ctat,\n            cancelled_rides_by_customer = EXCLUDED.cancelled_rides_by_customer,\n            reason_for_cancelling_by_customer = EXCLUDED.reason_for_cancelling_by_customer,\n            cancelled_rides_by_driver = EXCLUDED.cancelled_rides_by_driver,\n            driver_cancellation_reason = EXCLUDED.driver_cancellation_reason,\n            incomplete_rides = EXCLUDED.incomplete_rides,\n            incomplete_rides_reason = EXCLUDED.incomplete_rides_reason,\n            booking_value = EXCLUDED.booking_value,\n            ride_distance = EXCLUDED.ride_distance,\n            driver_ratings = EXCLUDED.driver_ratings,\n            customer_rating = EXCLUDED.customer_rating,\n            payment_method = EXCLUDED.payment_method;\n        ","logger":"airflow.task.operators.airflow.providers.common.sql.operators.sql.SQLExecuteQueryOperator"}
{"timestamp":"2025-09-23T07:28:47.546572","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `get` on Connection from sdk(`airflow.sdk.Connection`) instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-23T07:28:47.588131","level":"info","event":"Connection Retrieved '***sql_conn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-23T07:28:47.605319","level":"info","event":"Connection Retrieved '***sql_conn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-23T07:28:47.628613","level":"info","event":"Running statement: \n        INSERT INTO sor.uber_ride (\n            booking_date,\n            booking_time,\n            booking_id,\n            booking_status,\n            customer_id,\n            vehicle_type,\n            pickup_location,\n            drop_location,\n            avg_vtat,\n            avg_ctat,\n            cancelled_rides_by_customer,\n            reason_for_cancelling_by_customer,\n            cancelled_rides_by_driver,\n            driver_cancellation_reason,\n            incomplete_rides,\n            incomplete_rides_reason,\n            booking_value,\n            ride_distance,\n            driver_ratings,\n            customer_rating,\n            payment_method\n    )\n        SELECT *\n        FROM (\n            SELECT DISTINCT ON (\"Booking ID\")\n            TO_DATE(\"Date\", 'YYYY-MM-DD') AS booking_date,\n            TO_TIMESTAMP(\"Time\", 'HH24:MI:SS')::TIME AS booking_time,\n            \"Booking ID\" AS booking_id,\n            \"Booking Status\" AS booking_status,\n            \"Customer ID\" AS customer_id,\n            \"Vehicle Type\" AS vehicle_type,\n            \"Pickup Location\" AS pickup_location,\n            \"Drop Location\" AS drop_location,\n            NULLIF(\"Avg VTAT\", '')::DECIMAL AS avg_vtat,\n            NULLIF(\"Avg CTAT\", '')::DECIMAL AS avg_ctat,\n            NULLIF(\"Cancelled Rides by Customer\", '')::DECIMAL AS cancelled_rides_by_customer,\n            \"Reason for cancelling by Customer\" AS reason_for_cancelling_by_customer,\n            NULLIF(\"Cancelled Rides by Driver\", '')::DECIMAL AS cancelled_rides_by_driver,\n            \"Driver Cancellation Reason\" AS driver_cancellation_reason,\n            NULLIF(\"Incomplete Rides\", '')::DECIMAL AS incomplete_rides,\n            \"Incomplete Rides Reason\" AS incomplete_rides_reason,\n            NULLIF(\"Booking Value\", '')::DECIMAL AS booking_value,\n            NULLIF(\"Ride Distance\", '')::DECIMAL AS ride_distance,\n            NULLIF(\"Driver Ratings\", '')::DECIMAL AS driver_ratings,\n            NULLIF(\"Customer Rating\", '')::DECIMAL AS customer_rating,\n            \"Payment Method\" AS payment_method\n        FROM stg.uber_data\n        ORDER BY \"Booking ID\", \"Date\" DESC\n        ) AS deduped\n        ON CONFLICT (booking_id) \n        DO UPDATE SET\n            booking_date = EXCLUDED.booking_date,\n            booking_time = EXCLUDED.booking_time,\n            booking_status = EXCLUDED.booking_status,\n            customer_id = EXCLUDED.customer_id,\n            vehicle_type = EXCLUDED.vehicle_type,\n            pickup_location = EXCLUDED.pickup_location,\n            drop_location = EXCLUDED.drop_location,\n            avg_vtat = EXCLUDED.avg_vtat,\n            avg_ctat = EXCLUDED.avg_ctat,\n            cancelled_rides_by_customer = EXCLUDED.cancelled_rides_by_customer,\n            reason_for_cancelling_by_customer = EXCLUDED.reason_for_cancelling_by_customer,\n            cancelled_rides_by_driver = EXCLUDED.cancelled_rides_by_driver,\n            driver_cancellation_reason = EXCLUDED.driver_cancellation_reason,\n            incomplete_rides = EXCLUDED.incomplete_rides,\n            incomplete_rides_reason = EXCLUDED.incomplete_rides_reason,\n            booking_value = EXCLUDED.booking_value,\n            ride_distance = EXCLUDED.ride_distance,\n            driver_ratings = EXCLUDED.driver_ratings,\n            customer_rating = EXCLUDED.customer_rating,\n            payment_method = EXCLUDED.payment_method;\n        , parameters: None","logger":"airflow.task.hooks.airflow.providers.***.hooks.***.PostgresHook"}
{"timestamp":"2025-09-23T07:28:57.717492","level":"info","event":"Rows affected: 148767","logger":"airflow.task.hooks.airflow.providers.***.hooks.***.PostgresHook"}
{"timestamp":"2025-09-23T07:28:57.899130Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-23T07:28:57.899681Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-23T07:28:57.900153Z","level":"info","event":"Task operator:<Task(SQLExecuteQueryOperator): load_stg_to_sor>","chan":"stdout","logger":"task"}
