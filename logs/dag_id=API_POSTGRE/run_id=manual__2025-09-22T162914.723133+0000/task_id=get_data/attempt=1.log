{"timestamp":"2025-09-22T16:30:39.221587","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-22T16:30:39.222560","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/API_POSTGRE.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-22T16:30:46.347027Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-22T16:30:46.349629Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-22T16:30:46.356081Z","level":"info","event":"Current task name:get_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-22T16:30:46.367782Z","level":"info","event":"Dag name:API_POSTGRE","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-22T16:30:50.698954Z","level":"info","event":"Downloading from https://www.kaggle.com/api/v1/datasets/download/yashdevladdha/uber-ride-analytics-dashboard?dataset_version_number=2&file_name=ncr_ride_bookings.csv...","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-22T16:30:57.429775Z","level":"error","event":"\r  0%|          | 0.00/24.4M [00:00<?, ?B/s]\r  4%|▍         | 1.00M/24.4M [00:01<00:37, 650kB/s]\r  8%|▊         | 2.00M/24.4M [00:01<00:19, 1.23MB/s]\r 12%|█▏        | 3.00M/24.4M [00:02<00:12, 1.74MB/s]\r 16%|█▋        | 4.00M/24.4M [00:02<00:09, 2.37MB/s]\r 21%|██        | 5.00M/24.4M [00:02<00:06, 3.17MB/s]\r 25%|██▍       | 6.00M/24.4M [00:02<00:05, 3.32MB/s]\r 29%|██▊       | 7.00M/24.4M [00:03<00:04, 3.90MB/s]\r 37%|███▋      | 9.00M/24.4M [00:03<00:03, 5.35MB/s]\r 41%|████      | 10.0M/24.4M [00:03<00:02, 5.29MB/s]\r 45%|████▌     | 11.0M/24.4M [00:03<00:02, 5.06MB/s]\r 49%|████▉     | 12.0M/24.4M [00:03<00:02, 4.81MB/s]\r 53%|█████▎    | 13.0M/24.4M [00:04<00:02, 4.63MB/s]\r 57%|█████▋    | 14.0M/24.4M [00:04<00:02, 4.99MB/s]\r 62%|██████▏   | 15.0M/24.4M [00:04<00:01, 5.15MB/s]\r 66%|██████▌   | 16.0M/24.4M [00:04<00:01, 4.72MB/s]\r 70%|██████▉   | 17.0M/24.4M [00:05<00:01, 4.66MB/s]\r 74%|███████▍  | 18.0M/24.4M [00:05<00:01, 4.18MB/s]\r 78%|███████▊  | 19.0M/24.4M [00:05<00:01, 4.58MB/s]\r 82%|████████▏ | 20.0M/24.4M [00:05<00:00, 4.63MB/s]\r 86%|████████▌ | 21.0M/24.4M [00:05<00:00, 4.71MB/s]\r 90%|█████████ | 22.0M/24.4M [00:06<00:00, 4.78MB/s]\r 94%|█████████▍| 23.0M/24.4M [00:06<00:00, 5.04MB/s]\r 99%|█████████▊| 24.0M/24.4M [00:06<00:00, 4.95MB/s]\r100%|██████████| 24.4M/24.4M [00:06<00:00, 3.83MB/s]","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-22T16:30:59.630289Z","level":"info","event":"Fetching data from API and storing in PostgreSQL","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-22T16:31:06.358233","level":"info","event":"Done. Returned value was: dags/data/uber-data.csv","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-22T16:31:06.359680","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01997242-0b0b-7622-8dea-711f6404ad37'), task_id='get_data', dag_id='API_POSTGRE', run_id='manual__2025-09-22T16:29:14.723133+00:00', try_number=1, map_index=-1, hostname='65b971fdbed4', context_carrier={}, task=<Task(PythonOperator): get_data>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 22, 16, 30, 20, 47131, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/API_POSTGRE/runs/manual__2025-09-22T16%3A29%3A14.723133%2B00%3A00/tasks/get_data?try_number=1')","logger":"task"}
{"timestamp":"2025-09-22T16:31:06.550246Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-22T16:31:06.551101Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-22T16:31:06.551948Z","level":"info","event":"Task operator:<Task(PythonOperator): get_data>","chan":"stdout","logger":"task"}
