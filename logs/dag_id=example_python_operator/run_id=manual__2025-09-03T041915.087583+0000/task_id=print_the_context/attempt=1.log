{"timestamp":"2025-09-03T04:20:18.047712","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-03T04:20:18.064062","level":"info","event":"Filling up the DagBag from /home/airflow/.local/lib/python3.12/site-packages/airflow/example_dags/standard/example_python_operator.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-03T04:20:22.398598Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.401790Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.402583Z","level":"info","event":"Current task name:print_the_context","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.403058Z","level":"info","event":"Dag name:example_python_operator","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.409381Z","level":"info","event":"::group::All kwargs","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.427447Z","level":"info","event":"{'conn': <ConnectionAccessor (dynamic access)>,","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.427948Z","level":"info","event":" 'dag': <DAG: example_python_operator>,","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.428339Z","level":"info","event":" 'dag_run': DagRun(dag_id='example_python_operator', run_id='manual__2025-09-03T04:19:15.087583+00:00', logical_date=datetime.datetime(2025, 9, 3, 4, 19, 13, 555000, tzinfo=datetime.timezone.utc), data_interval_start=datetime.datetime(2025, 9, 3, 4, 19, 13, 555000, tzinfo=datetime.timezone.utc), data_interval_end=datetime.datetime(2025, 9, 3, 4, 19, 13, 555000, tzinfo=datetime.timezone.utc), run_after=datetime.datetime(2025, 9, 3, 4, 19, 13, 555000, tzinfo=datetime.timezone.utc), start_date=datetime.datetime(2025, 9, 3, 4, 19, 16, 60667, tzinfo=datetime.timezone.utc), end_date=None, clear_number=0, run_type=<DagRunType.MANUAL: 'manual'>, state=<DagRunState.RUNNING: 'running'>, conf={}, consumed_asset_events=[]),","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.428693Z","level":"info","event":" 'data_interval_end': DateTime(2025, 9, 3, 4, 19, 13, 555000, tzinfo=Timezone('UTC')),","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.429003Z","level":"info","event":" 'data_interval_start': DateTime(2025, 9, 3, 4, 19, 13, 555000, tzinfo=Timezone('UTC')),","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.429359Z","level":"info","event":" 'ds_nodash': '20250903',","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.429665Z","level":"info","event":" 'inlet_events': InletEventsAccessors(_inlets=[], _assets={}, _asset_aliases={}),","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.429950Z","level":"info","event":" 'inlets': [],","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.430238Z","level":"info","event":" 'logical_date': DateTime(2025, 9, 3, 4, 19, 13, 555000, tzinfo=Timezone('UTC')),","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.430516Z","level":"info","event":" 'macros': <MacrosAccessor (dynamic access to macros)>,","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.430821Z","level":"info","event":" 'map_index_template': None,","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.431112Z","level":"info","event":" 'outlet_events': <airflow.sdk.execution_time.context.OutletEventAccessors object at 0x7fa8eb405e80>,","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.433466Z","level":"info","event":" 'outlets': [],","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.441534Z","level":"info","event":" 'params': {},","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.591149Z","level":"info","event":" 'prev_data_interval_end_success': <Proxy at 0x7fa8ea27cf00 with factory <function RuntimeTaskInstance.get_template_context.<locals>.<lambda> at 0x7fa8ea292700>>,","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.591909Z","level":"info","event":" 'prev_data_interval_start_success': <Proxy at 0x7fa8ea27f6c0 with factory <function RuntimeTaskInstance.get_template_context.<locals>.<lambda> at 0x7fa8ea292660>>,","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.592297Z","level":"info","event":" 'prev_end_date_success': <Proxy at 0x7fa8ea6aaf40 with factory <function RuntimeTaskInstance.get_template_context.<locals>.<lambda> at 0x7fa8ea2916c0>>,","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.592674Z","level":"info","event":" 'prev_start_date_success': <Proxy at 0x7fa8ea6aad80 with factory <function RuntimeTaskInstance.get_template_context.<locals>.<lambda> at 0x7fa8ea290ea0>>,","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.593060Z","level":"info","event":" 'run_id': 'manual__2025-09-03T04:19:15.087583+00:00',","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.593391Z","level":"info","event":" 'task': <Task(PythonOperator): print_the_context>,","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.593730Z","level":"info","event":" 'task_instance': RuntimeTaskInstance(id=UUID('01990dcc-e27e-700b-9737-13f7b4059ea3'), task_id='print_the_context', dag_id='example_python_operator', run_id='manual__2025-09-03T04:19:15.087583+00:00', try_number=1, map_index=-1, hostname='2fe5f5d0fbd4', context_carrier={}, task=<Task(PythonOperator): print_the_context>, bundle_instance=LocalDagBundle(name=example_dags), max_tries=0, start_date=datetime.datetime(2025, 9, 3, 4, 19, 19, 310595, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/example_python_operator/runs/manual__2025-09-03T04%3A19%3A15.087583%2B00%3A00/tasks/print_the_context?try_number=1'),","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.594632Z","level":"info","event":" 'task_instance_key_str': 'example_python_operator__print_the_context__20250903',","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.595223Z","level":"info","event":" 'task_reschedule_count': 0,","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.595878Z","level":"info","event":" 'templates_dict': None,","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.596239Z","level":"info","event":" 'ti': RuntimeTaskInstance(id=UUID('01990dcc-e27e-700b-9737-13f7b4059ea3'), task_id='print_the_context', dag_id='example_python_operator', run_id='manual__2025-09-03T04:19:15.087583+00:00', try_number=1, map_index=-1, hostname='2fe5f5d0fbd4', context_carrier={}, task=<Task(PythonOperator): print_the_context>, bundle_instance=LocalDagBundle(name=example_dags), max_tries=0, start_date=datetime.datetime(2025, 9, 3, 4, 19, 19, 310595, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/example_python_operator/runs/manual__2025-09-03T04%3A19%3A15.087583%2B00%3A00/tasks/print_the_context?try_number=1'),","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.596768Z","level":"info","event":" 'triggering_asset_events': TriggeringAssetEventsAccessor(_events=defaultdict(<class 'list'>, {})),","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.597125Z","level":"info","event":" 'ts': '2025-09-03T04:19:13.555000+00:00',","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.597458Z","level":"info","event":" 'ts_nodash': '20250903T041913',","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.597722Z","level":"info","event":" 'ts_nodash_with_tz': '20250903T041913.555000+0000',","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.603559Z","level":"info","event":" 'var': {'json': <VariableAccessor (dynamic access)>,","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.607273Z","level":"info","event":"         'value': <VariableAccessor (dynamic access)>}}","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.608296Z","level":"info","event":"::endgroup::","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.608973Z","level":"info","event":"::group::Context variable ds","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.626292Z","level":"info","event":"2025-09-03","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.626854Z","level":"info","event":"::endgroup::","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.592799","level":"info","event":"Done. Returned value was: Whatever you return gets printed in the logs","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-03T04:20:22.593548","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01990dcc-e27e-700b-9737-13f7b4059ea3'), task_id='print_the_context', dag_id='example_python_operator', run_id='manual__2025-09-03T04:19:15.087583+00:00', try_number=1, map_index=-1, hostname='2fe5f5d0fbd4', context_carrier={}, task=<Task(PythonOperator): print_the_context>, bundle_instance=LocalDagBundle(name=example_dags), max_tries=0, start_date=datetime.datetime(2025, 9, 3, 4, 19, 19, 310595, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/example_python_operator/runs/manual__2025-09-03T04%3A19%3A15.087583%2B00%3A00/tasks/print_the_context?try_number=1')","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.896085Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.896559Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T04:20:22.897008Z","level":"info","event":"Task operator:<Task(PythonOperator): print_the_context>","chan":"stdout","logger":"task"}
